name: Deploy Spring Boot Application to AWS EC2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for Gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test
        env:
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/gatherlove-app:latest .

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/gatherlove-app:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add SSH Key to Agent
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          eval "$(ssh-agent -s)"
          ssh-add private_key.pem

      - name: Deploy Application via SSH
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/gatherlove-app:latest
            
            # Navigate to project directory (assuming you have docker-compose.yml on EC2)
            cd /home/${{ secrets.EC2_USER }}/gatherlove || mkdir -p /home/${{ secrets.EC2_USER }}/gatherlove && cd /home/${{ secrets.EC2_USER }}/gatherlove
            
            # Set environment variable for Docker image
            export DOCKER_IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/gatherlove-app:latest
            
            # Deploy with docker-compose
            docker-compose down || true
            docker-compose up -d
            
            # Wait for services to be healthy
            echo "Waiting for services to start..."
            sleep 30
            docker-compose ps
          EOF