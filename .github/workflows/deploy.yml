name: Deploy Spring Boot Application to AWS EC2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for Gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test
        env:
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/gatherlove-app:latest .

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/gatherlove-app:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add SSH Key to Agent
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          eval "$(ssh-agent -s)"
          ssh-add private_key.pem

      - name: Deploy Application via SSH
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Pull latest Docker image
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/gatherlove-app:latest
            
            # Stop and remove existing containers
            docker stop gatherlove-app || true
            docker rm gatherlove-app || true
            docker stop gatherlove-postgres || true
            docker rm gatherlove-postgres || true
            docker stop gatherlove-prometheus || true
            docker rm gatherlove-prometheus || true
            docker stop gatherlove-grafana || true
            docker rm gatherlove-grafana || true
            
            # Remove existing network and volumes if needed
            docker network rm gatherlove-network || true
            
            # Create network
            docker network create gatherlove-network
            
            # Create volumes
            docker volume create postgres_data || true
            docker volume create prometheus_data || true
            docker volume create grafana_data || true
            
            # Run PostgreSQL container
            docker run -d \
              --name gatherlove-postgres \
              --network gatherlove-network \
              -p 5432:5432 \
              -e POSTGRES_DB=gatherlove \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=password \
              -v postgres_data:/var/lib/postgresql/data \
              postgres:15
            
            # Wait for PostgreSQL to be ready
            echo "Waiting for PostgreSQL to start..."
            sleep 15
            
            # Run Prometheus container
            docker run -d \
              --name gatherlove-prometheus \
              --network gatherlove-network \
              -p 9090:9090 \
              -v prometheus_data:/prometheus \
              prom/prometheus:latest \
              --config.file=/etc/prometheus/prometheus.yml \
              --storage.tsdb.path=/prometheus \
              --web.console.libraries=/etc/prometheus/console_libraries \
              --web.console.templates=/etc/prometheus/consoles \
              --storage.tsdb.retention.time=200h \
              --web.enable-lifecycle
            
            # Run Grafana container
            docker run -d \
              --name gatherlove-grafana \
              --network gatherlove-network \
              -p 3000:3000 \
              -e GF_SECURITY_ADMIN_PASSWORD=admin \
              -v grafana_data:/var/lib/grafana \
              grafana/grafana:latest
            
            # Run the application container
            docker run -d \
              --name gatherlove-app \
              --network gatherlove-network \
              -p 8080:8080 \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://gatherlove-postgres:5432/gatherlove \
              -e SPRING_DATASOURCE_USERNAME=postgres \
              -e SPRING_DATASOURCE_PASSWORD=password \
              ${{ secrets.DOCKER_HUB_USERNAME }}/gatherlove-app:latest
            
            # Wait for services to start
            echo "Waiting for services to start..."
            sleep 30
            
            # Show running containers
            echo "Deployment completed. Running containers:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          EOF